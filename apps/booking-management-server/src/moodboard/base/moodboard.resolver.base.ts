/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Moodboard } from "./Moodboard";
import { MoodboardCountArgs } from "./MoodboardCountArgs";
import { MoodboardFindManyArgs } from "./MoodboardFindManyArgs";
import { MoodboardFindUniqueArgs } from "./MoodboardFindUniqueArgs";
import { CreateMoodboardArgs } from "./CreateMoodboardArgs";
import { UpdateMoodboardArgs } from "./UpdateMoodboardArgs";
import { DeleteMoodboardArgs } from "./DeleteMoodboardArgs";
import { MoodboardService } from "../moodboard.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Moodboard)
export class MoodboardResolverBase {
  constructor(
    protected readonly service: MoodboardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Moodboard",
    action: "read",
    possession: "any",
  })
  async _moodboardsMeta(
    @graphql.Args() args: MoodboardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Moodboard])
  @nestAccessControl.UseRoles({
    resource: "Moodboard",
    action: "read",
    possession: "any",
  })
  async moodboards(
    @graphql.Args() args: MoodboardFindManyArgs
  ): Promise<Moodboard[]> {
    return this.service.moodboards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Moodboard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Moodboard",
    action: "read",
    possession: "own",
  })
  async moodboard(
    @graphql.Args() args: MoodboardFindUniqueArgs
  ): Promise<Moodboard | null> {
    const result = await this.service.moodboard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Moodboard)
  @nestAccessControl.UseRoles({
    resource: "Moodboard",
    action: "create",
    possession: "any",
  })
  async createMoodboard(
    @graphql.Args() args: CreateMoodboardArgs
  ): Promise<Moodboard> {
    return await this.service.createMoodboard({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Moodboard)
  @nestAccessControl.UseRoles({
    resource: "Moodboard",
    action: "update",
    possession: "any",
  })
  async updateMoodboard(
    @graphql.Args() args: UpdateMoodboardArgs
  ): Promise<Moodboard | null> {
    try {
      return await this.service.updateMoodboard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Moodboard)
  @nestAccessControl.UseRoles({
    resource: "Moodboard",
    action: "delete",
    possession: "any",
  })
  async deleteMoodboard(
    @graphql.Args() args: DeleteMoodboardArgs
  ): Promise<Moodboard | null> {
    try {
      return await this.service.deleteMoodboard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
