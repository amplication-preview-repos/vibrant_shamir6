/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClientProfile as PrismaClientProfile,
  User as PrismaUser,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ClientProfileServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.ClientProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clientProfile.count(args);
  }

  async clientProfiles<T extends Prisma.ClientProfileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileFindManyArgs>
  ): Promise<PrismaClientProfile[]> {
    return this.prisma.clientProfile.findMany<Prisma.ClientProfileFindManyArgs>(
      args
    );
  }
  async clientProfile<T extends Prisma.ClientProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileFindUniqueArgs>
  ): Promise<PrismaClientProfile | null> {
    return this.prisma.clientProfile.findUnique(args);
  }
  async createClientProfile<T extends Prisma.ClientProfileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileCreateArgs>
  ): Promise<PrismaClientProfile> {
    return this.prisma.clientProfile.create<T>(args);
  }
  async updateClientProfile<T extends Prisma.ClientProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileUpdateArgs>
  ): Promise<PrismaClientProfile> {
    return this.prisma.clientProfile.update<T>(args);
  }
  async deleteClientProfile<T extends Prisma.ClientProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileDeleteArgs>
  ): Promise<PrismaClientProfile> {
    return this.prisma.clientProfile.delete(args);
  }

  async uploadMoodboard<T extends Prisma.ClientProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaClientProfile> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "moodboard";
    const moodboard = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.clientProfile.update({
      where: args.where,

      data: {
        moodboard: moodboard as InputJsonValue,
      },
    });
  }

  async downloadMoodboard<T extends Prisma.ClientProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileFindUniqueArgs>
  ): Promise<FileDownload> {
    const { moodboard } = await this.prisma.clientProfile.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      moodboard as unknown as LocalStorageFile
    );
  }

  async deleteMoodboard<T extends Prisma.ClientProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientProfileFindUniqueArgs>
  ): Promise<PrismaClientProfile> {
    const { moodboard } = await this.prisma.clientProfile.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      moodboard as unknown as LocalStorageFile
    );

    return await this.prisma.clientProfile.update({
      where: args.where,

      data: {
        moodboard: Prisma.DbNull,
      },
    });
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.clientProfile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
