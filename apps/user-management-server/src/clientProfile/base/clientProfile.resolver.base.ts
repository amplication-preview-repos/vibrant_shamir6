/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClientProfile } from "./ClientProfile";
import { ClientProfileCountArgs } from "./ClientProfileCountArgs";
import { ClientProfileFindManyArgs } from "./ClientProfileFindManyArgs";
import { ClientProfileFindUniqueArgs } from "./ClientProfileFindUniqueArgs";
import { CreateClientProfileArgs } from "./CreateClientProfileArgs";
import { UpdateClientProfileArgs } from "./UpdateClientProfileArgs";
import { DeleteClientProfileArgs } from "./DeleteClientProfileArgs";
import { User } from "../../user/base/User";
import { ClientProfileService } from "../clientProfile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClientProfile)
export class ClientProfileResolverBase {
  constructor(
    protected readonly service: ClientProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClientProfile",
    action: "read",
    possession: "any",
  })
  async _clientProfilesMeta(
    @graphql.Args() args: ClientProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClientProfile])
  @nestAccessControl.UseRoles({
    resource: "ClientProfile",
    action: "read",
    possession: "any",
  })
  async clientProfiles(
    @graphql.Args() args: ClientProfileFindManyArgs
  ): Promise<ClientProfile[]> {
    return this.service.clientProfiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClientProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClientProfile",
    action: "read",
    possession: "own",
  })
  async clientProfile(
    @graphql.Args() args: ClientProfileFindUniqueArgs
  ): Promise<ClientProfile | null> {
    const result = await this.service.clientProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientProfile)
  @nestAccessControl.UseRoles({
    resource: "ClientProfile",
    action: "create",
    possession: "any",
  })
  async createClientProfile(
    @graphql.Args() args: CreateClientProfileArgs
  ): Promise<ClientProfile> {
    return await this.service.createClientProfile({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientProfile)
  @nestAccessControl.UseRoles({
    resource: "ClientProfile",
    action: "update",
    possession: "any",
  })
  async updateClientProfile(
    @graphql.Args() args: UpdateClientProfileArgs
  ): Promise<ClientProfile | null> {
    try {
      return await this.service.updateClientProfile({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClientProfile)
  @nestAccessControl.UseRoles({
    resource: "ClientProfile",
    action: "delete",
    possession: "any",
  })
  async deleteClientProfile(
    @graphql.Args() args: DeleteClientProfileArgs
  ): Promise<ClientProfile | null> {
    try {
      return await this.service.deleteClientProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClientProfile)
  async uploadMoodboard(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: ClientProfileFindUniqueArgs
  ): Promise<ClientProfile> {
    return await this.service.uploadMoodboard(args, file);
  }

  @graphql.Mutation(() => ClientProfile)
  async deleteMoodboard(
    @graphql.Args()
    args: ClientProfileFindUniqueArgs
  ): Promise<ClientProfile> {
    return await this.service.deleteMoodboard(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: ClientProfile): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
