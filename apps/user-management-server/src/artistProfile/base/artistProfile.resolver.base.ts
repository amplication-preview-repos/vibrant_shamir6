/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ArtistProfile } from "./ArtistProfile";
import { ArtistProfileCountArgs } from "./ArtistProfileCountArgs";
import { ArtistProfileFindManyArgs } from "./ArtistProfileFindManyArgs";
import { ArtistProfileFindUniqueArgs } from "./ArtistProfileFindUniqueArgs";
import { CreateArtistProfileArgs } from "./CreateArtistProfileArgs";
import { UpdateArtistProfileArgs } from "./UpdateArtistProfileArgs";
import { DeleteArtistProfileArgs } from "./DeleteArtistProfileArgs";
import { InviteCode } from "../../inviteCode/base/InviteCode";
import { User } from "../../user/base/User";
import { ArtistProfileService } from "../artistProfile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ArtistProfile)
export class ArtistProfileResolverBase {
  constructor(
    protected readonly service: ArtistProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "read",
    possession: "any",
  })
  async _artistProfilesMeta(
    @graphql.Args() args: ArtistProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ArtistProfile])
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "read",
    possession: "any",
  })
  async artistProfiles(
    @graphql.Args() args: ArtistProfileFindManyArgs
  ): Promise<ArtistProfile[]> {
    return this.service.artistProfiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ArtistProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "read",
    possession: "own",
  })
  async artistProfile(
    @graphql.Args() args: ArtistProfileFindUniqueArgs
  ): Promise<ArtistProfile | null> {
    const result = await this.service.artistProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ArtistProfile)
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "create",
    possession: "any",
  })
  async createArtistProfile(
    @graphql.Args() args: CreateArtistProfileArgs
  ): Promise<ArtistProfile> {
    return await this.service.createArtistProfile({
      ...args,
      data: {
        ...args.data,

        inviteCode: args.data.inviteCode
          ? {
              connect: args.data.inviteCode,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ArtistProfile)
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "update",
    possession: "any",
  })
  async updateArtistProfile(
    @graphql.Args() args: UpdateArtistProfileArgs
  ): Promise<ArtistProfile | null> {
    try {
      return await this.service.updateArtistProfile({
        ...args,
        data: {
          ...args.data,

          inviteCode: args.data.inviteCode
            ? {
                connect: args.data.inviteCode,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ArtistProfile)
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "delete",
    possession: "any",
  })
  async deleteArtistProfile(
    @graphql.Args() args: DeleteArtistProfileArgs
  ): Promise<ArtistProfile | null> {
    try {
      return await this.service.deleteArtistProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InviteCode, {
    nullable: true,
    name: "inviteCode",
  })
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "read",
    possession: "any",
  })
  async getInviteCode(
    @graphql.Parent() parent: ArtistProfile
  ): Promise<InviteCode | null> {
    const result = await this.service.getInviteCode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: ArtistProfile): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
