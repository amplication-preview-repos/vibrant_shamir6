/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InviteCode } from "./InviteCode";
import { InviteCodeCountArgs } from "./InviteCodeCountArgs";
import { InviteCodeFindManyArgs } from "./InviteCodeFindManyArgs";
import { InviteCodeFindUniqueArgs } from "./InviteCodeFindUniqueArgs";
import { CreateInviteCodeArgs } from "./CreateInviteCodeArgs";
import { UpdateInviteCodeArgs } from "./UpdateInviteCodeArgs";
import { DeleteInviteCodeArgs } from "./DeleteInviteCodeArgs";
import { ArtistProfileFindManyArgs } from "../../artistProfile/base/ArtistProfileFindManyArgs";
import { ArtistProfile } from "../../artistProfile/base/ArtistProfile";
import { InviteCodeService } from "../inviteCode.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InviteCode)
export class InviteCodeResolverBase {
  constructor(
    protected readonly service: InviteCodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "read",
    possession: "any",
  })
  async _inviteCodesMeta(
    @graphql.Args() args: InviteCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InviteCode])
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "read",
    possession: "any",
  })
  async inviteCodes(
    @graphql.Args() args: InviteCodeFindManyArgs
  ): Promise<InviteCode[]> {
    return this.service.inviteCodes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InviteCode, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "read",
    possession: "own",
  })
  async inviteCode(
    @graphql.Args() args: InviteCodeFindUniqueArgs
  ): Promise<InviteCode | null> {
    const result = await this.service.inviteCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InviteCode)
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "create",
    possession: "any",
  })
  async createInviteCode(
    @graphql.Args() args: CreateInviteCodeArgs
  ): Promise<InviteCode> {
    return await this.service.createInviteCode({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InviteCode)
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "update",
    possession: "any",
  })
  async updateInviteCode(
    @graphql.Args() args: UpdateInviteCodeArgs
  ): Promise<InviteCode | null> {
    try {
      return await this.service.updateInviteCode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InviteCode)
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "delete",
    possession: "any",
  })
  async deleteInviteCode(
    @graphql.Args() args: DeleteInviteCodeArgs
  ): Promise<InviteCode | null> {
    try {
      return await this.service.deleteInviteCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ArtistProfile], { name: "artistProfiles" })
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "read",
    possession: "any",
  })
  async findArtistProfiles(
    @graphql.Parent() parent: InviteCode,
    @graphql.Args() args: ArtistProfileFindManyArgs
  ): Promise<ArtistProfile[]> {
    const results = await this.service.findArtistProfiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
