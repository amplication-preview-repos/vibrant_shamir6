/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InviteCode as PrismaInviteCode,
  ArtistProfile as PrismaArtistProfile,
} from "@prisma/client";

export class InviteCodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InviteCodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inviteCode.count(args);
  }

  async inviteCodes<T extends Prisma.InviteCodeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InviteCodeFindManyArgs>
  ): Promise<PrismaInviteCode[]> {
    return this.prisma.inviteCode.findMany<Prisma.InviteCodeFindManyArgs>(args);
  }
  async inviteCode<T extends Prisma.InviteCodeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InviteCodeFindUniqueArgs>
  ): Promise<PrismaInviteCode | null> {
    return this.prisma.inviteCode.findUnique(args);
  }
  async createInviteCode<T extends Prisma.InviteCodeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InviteCodeCreateArgs>
  ): Promise<PrismaInviteCode> {
    return this.prisma.inviteCode.create<T>(args);
  }
  async updateInviteCode<T extends Prisma.InviteCodeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InviteCodeUpdateArgs>
  ): Promise<PrismaInviteCode> {
    return this.prisma.inviteCode.update<T>(args);
  }
  async deleteInviteCode<T extends Prisma.InviteCodeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InviteCodeDeleteArgs>
  ): Promise<PrismaInviteCode> {
    return this.prisma.inviteCode.delete(args);
  }

  async findArtistProfiles(
    parentId: string,
    args: Prisma.ArtistProfileFindManyArgs
  ): Promise<PrismaArtistProfile[]> {
    return this.prisma.inviteCode
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .artistProfiles(args);
  }
}
