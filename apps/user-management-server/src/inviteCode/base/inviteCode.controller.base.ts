/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InviteCodeService } from "../inviteCode.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InviteCodeCreateInput } from "./InviteCodeCreateInput";
import { InviteCode } from "./InviteCode";
import { InviteCodeFindManyArgs } from "./InviteCodeFindManyArgs";
import { InviteCodeWhereUniqueInput } from "./InviteCodeWhereUniqueInput";
import { InviteCodeUpdateInput } from "./InviteCodeUpdateInput";
import { ArtistProfileFindManyArgs } from "../../artistProfile/base/ArtistProfileFindManyArgs";
import { ArtistProfile } from "../../artistProfile/base/ArtistProfile";
import { ArtistProfileWhereUniqueInput } from "../../artistProfile/base/ArtistProfileWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InviteCodeControllerBase {
  constructor(
    protected readonly service: InviteCodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InviteCode })
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: InviteCodeCreateInput,
  })
  async createInviteCode(
    @common.Body() data: InviteCodeCreateInput
  ): Promise<InviteCode> {
    return await this.service.createInviteCode({
      data: data,
      select: {
        code: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        valid: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [InviteCode] })
  @ApiNestedQuery(InviteCodeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async inviteCodes(@common.Req() request: Request): Promise<InviteCode[]> {
    const args = plainToClass(InviteCodeFindManyArgs, request.query);
    return this.service.inviteCodes({
      ...args,
      select: {
        code: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        valid: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InviteCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async inviteCode(
    @common.Param() params: InviteCodeWhereUniqueInput
  ): Promise<InviteCode | null> {
    const result = await this.service.inviteCode({
      where: params,
      select: {
        code: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        valid: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InviteCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: InviteCodeUpdateInput,
  })
  async updateInviteCode(
    @common.Param() params: InviteCodeWhereUniqueInput,
    @common.Body() data: InviteCodeUpdateInput
  ): Promise<InviteCode | null> {
    try {
      return await this.service.updateInviteCode({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          valid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InviteCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInviteCode(
    @common.Param() params: InviteCodeWhereUniqueInput
  ): Promise<InviteCode | null> {
    try {
      return await this.service.deleteInviteCode({
        where: params,
        select: {
          code: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          valid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/artistProfiles")
  @ApiNestedQuery(ArtistProfileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ArtistProfile",
    action: "read",
    possession: "any",
  })
  async findArtistProfiles(
    @common.Req() request: Request,
    @common.Param() params: InviteCodeWhereUniqueInput
  ): Promise<ArtistProfile[]> {
    const query = plainToClass(ArtistProfileFindManyArgs, request.query);
    const results = await this.service.findArtistProfiles(params.id, {
      ...query,
      select: {
        bio: true,
        commissionRate: true,
        createdAt: true,
        id: true,

        inviteCode: {
          select: {
            id: true,
          },
        },

        location: true,
        priceRange: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        workPortfolio: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/artistProfiles")
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "update",
    possession: "any",
  })
  async connectArtistProfiles(
    @common.Param() params: InviteCodeWhereUniqueInput,
    @common.Body() body: ArtistProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      artistProfiles: {
        connect: body,
      },
    };
    await this.service.updateInviteCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/artistProfiles")
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "update",
    possession: "any",
  })
  async updateArtistProfiles(
    @common.Param() params: InviteCodeWhereUniqueInput,
    @common.Body() body: ArtistProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      artistProfiles: {
        set: body,
      },
    };
    await this.service.updateInviteCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/artistProfiles")
  @nestAccessControl.UseRoles({
    resource: "InviteCode",
    action: "update",
    possession: "any",
  })
  async disconnectArtistProfiles(
    @common.Param() params: InviteCodeWhereUniqueInput,
    @common.Body() body: ArtistProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      artistProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateInviteCode({
      where: params,
      data,
      select: { id: true },
    });
  }
}
