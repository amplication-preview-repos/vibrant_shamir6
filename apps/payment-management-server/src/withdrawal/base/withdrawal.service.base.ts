/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Withdrawal as PrismaWithdrawal } from "@prisma/client";

export class WithdrawalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WithdrawalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.withdrawal.count(args);
  }

  async withdrawals<T extends Prisma.WithdrawalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithdrawalFindManyArgs>
  ): Promise<PrismaWithdrawal[]> {
    return this.prisma.withdrawal.findMany<Prisma.WithdrawalFindManyArgs>(args);
  }
  async withdrawal<T extends Prisma.WithdrawalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithdrawalFindUniqueArgs>
  ): Promise<PrismaWithdrawal | null> {
    return this.prisma.withdrawal.findUnique(args);
  }
  async createWithdrawal<T extends Prisma.WithdrawalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithdrawalCreateArgs>
  ): Promise<PrismaWithdrawal> {
    return this.prisma.withdrawal.create<T>(args);
  }
  async updateWithdrawal<T extends Prisma.WithdrawalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithdrawalUpdateArgs>
  ): Promise<PrismaWithdrawal> {
    return this.prisma.withdrawal.update<T>(args);
  }
  async deleteWithdrawal<T extends Prisma.WithdrawalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithdrawalDeleteArgs>
  ): Promise<PrismaWithdrawal> {
    return this.prisma.withdrawal.delete(args);
  }
}
