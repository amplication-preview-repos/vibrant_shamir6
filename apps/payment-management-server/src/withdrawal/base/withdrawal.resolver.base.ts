/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Withdrawal } from "./Withdrawal";
import { WithdrawalCountArgs } from "./WithdrawalCountArgs";
import { WithdrawalFindManyArgs } from "./WithdrawalFindManyArgs";
import { WithdrawalFindUniqueArgs } from "./WithdrawalFindUniqueArgs";
import { CreateWithdrawalArgs } from "./CreateWithdrawalArgs";
import { UpdateWithdrawalArgs } from "./UpdateWithdrawalArgs";
import { DeleteWithdrawalArgs } from "./DeleteWithdrawalArgs";
import { WithdrawalService } from "../withdrawal.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Withdrawal)
export class WithdrawalResolverBase {
  constructor(
    protected readonly service: WithdrawalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Withdrawal",
    action: "read",
    possession: "any",
  })
  async _withdrawalsMeta(
    @graphql.Args() args: WithdrawalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Withdrawal])
  @nestAccessControl.UseRoles({
    resource: "Withdrawal",
    action: "read",
    possession: "any",
  })
  async withdrawals(
    @graphql.Args() args: WithdrawalFindManyArgs
  ): Promise<Withdrawal[]> {
    return this.service.withdrawals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Withdrawal, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Withdrawal",
    action: "read",
    possession: "own",
  })
  async withdrawal(
    @graphql.Args() args: WithdrawalFindUniqueArgs
  ): Promise<Withdrawal | null> {
    const result = await this.service.withdrawal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Withdrawal)
  @nestAccessControl.UseRoles({
    resource: "Withdrawal",
    action: "create",
    possession: "any",
  })
  async createWithdrawal(
    @graphql.Args() args: CreateWithdrawalArgs
  ): Promise<Withdrawal> {
    return await this.service.createWithdrawal({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Withdrawal)
  @nestAccessControl.UseRoles({
    resource: "Withdrawal",
    action: "update",
    possession: "any",
  })
  async updateWithdrawal(
    @graphql.Args() args: UpdateWithdrawalArgs
  ): Promise<Withdrawal | null> {
    try {
      return await this.service.updateWithdrawal({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Withdrawal)
  @nestAccessControl.UseRoles({
    resource: "Withdrawal",
    action: "delete",
    possession: "any",
  })
  async deleteWithdrawal(
    @graphql.Args() args: DeleteWithdrawalArgs
  ): Promise<Withdrawal | null> {
    try {
      return await this.service.deleteWithdrawal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
