/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Commission as PrismaCommission } from "@prisma/client";

export class CommissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commission.count(args);
  }

  async commissions<T extends Prisma.CommissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommissionFindManyArgs>
  ): Promise<PrismaCommission[]> {
    return this.prisma.commission.findMany<Prisma.CommissionFindManyArgs>(args);
  }
  async commission<T extends Prisma.CommissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommissionFindUniqueArgs>
  ): Promise<PrismaCommission | null> {
    return this.prisma.commission.findUnique(args);
  }
  async createCommission<T extends Prisma.CommissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommissionCreateArgs>
  ): Promise<PrismaCommission> {
    return this.prisma.commission.create<T>(args);
  }
  async updateCommission<T extends Prisma.CommissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommissionUpdateArgs>
  ): Promise<PrismaCommission> {
    return this.prisma.commission.update<T>(args);
  }
  async deleteCommission<T extends Prisma.CommissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommissionDeleteArgs>
  ): Promise<PrismaCommission> {
    return this.prisma.commission.delete(args);
  }
}
