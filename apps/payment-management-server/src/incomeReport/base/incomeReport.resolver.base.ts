/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { IncomeReport } from "./IncomeReport";
import { IncomeReportCountArgs } from "./IncomeReportCountArgs";
import { IncomeReportFindManyArgs } from "./IncomeReportFindManyArgs";
import { IncomeReportFindUniqueArgs } from "./IncomeReportFindUniqueArgs";
import { CreateIncomeReportArgs } from "./CreateIncomeReportArgs";
import { UpdateIncomeReportArgs } from "./UpdateIncomeReportArgs";
import { DeleteIncomeReportArgs } from "./DeleteIncomeReportArgs";
import { IncomeReportService } from "../incomeReport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IncomeReport)
export class IncomeReportResolverBase {
  constructor(
    protected readonly service: IncomeReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IncomeReport",
    action: "read",
    possession: "any",
  })
  async _incomeReportsMeta(
    @graphql.Args() args: IncomeReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IncomeReport])
  @nestAccessControl.UseRoles({
    resource: "IncomeReport",
    action: "read",
    possession: "any",
  })
  async incomeReports(
    @graphql.Args() args: IncomeReportFindManyArgs
  ): Promise<IncomeReport[]> {
    return this.service.incomeReports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IncomeReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IncomeReport",
    action: "read",
    possession: "own",
  })
  async incomeReport(
    @graphql.Args() args: IncomeReportFindUniqueArgs
  ): Promise<IncomeReport | null> {
    const result = await this.service.incomeReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeReport)
  @nestAccessControl.UseRoles({
    resource: "IncomeReport",
    action: "create",
    possession: "any",
  })
  async createIncomeReport(
    @graphql.Args() args: CreateIncomeReportArgs
  ): Promise<IncomeReport> {
    return await this.service.createIncomeReport({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeReport)
  @nestAccessControl.UseRoles({
    resource: "IncomeReport",
    action: "update",
    possession: "any",
  })
  async updateIncomeReport(
    @graphql.Args() args: UpdateIncomeReportArgs
  ): Promise<IncomeReport | null> {
    try {
      return await this.service.updateIncomeReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IncomeReport)
  @nestAccessControl.UseRoles({
    resource: "IncomeReport",
    action: "delete",
    possession: "any",
  })
  async deleteIncomeReport(
    @graphql.Args() args: DeleteIncomeReportArgs
  ): Promise<IncomeReport | null> {
    try {
      return await this.service.deleteIncomeReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
